\documentclass{ransom}

<%

load 'eruby_ransom.rb'

author = "petronius"
treebank = TreeBank.new(author)
freq_file = nil # "lemmas/#{author}_freq.json"
latin_genos = Genos.new('la')
db = GlossDB.from_genos(latin_genos)
core = json_from_file_or_die("core/latin.json").keys # array containing lemmas not to put in vocab lists, because they're in core vocab in back
latin = Epos.new("text/petronius/satyricon_62.txt","latin",false,genos:latin_genos)
translation = Epos.new("text/petronius/satyricon_62_firebaugh.txt","latin",false,genos:Genos.new('en',is_verse:false),postfilter:lambda { |s| Epos.strip_pg_footnotes(s) })

notes = []

stuff = treebank,freq_file,latin,translation,notes,core

%>

\begin{document}

\pagestyle{fancy}

<%

matches = [
  [ "Forte dominus Capuae exierat ad scruta", "It so happened that our master" ],
  [ "In larvam intravi", "I looked like a ghost" ],
  [ "Intellexi illum versipellem esse>", "I hope your geniuses will all get after me if I lie>" ],

]

format = ENV['FORMAT']
if format.nil? then $stderr.print "FORMAT environment variable not set\n"; exit(-1) end
if !(['whole','booklet_short'].include?(format)) then $stderr.print "FORMAT environment variable set to illegal value #{format}\n"; exit(-1) end
if format=='booklet_short' then matches = matches[0..17] end

dry_run = !(ENV['DRY_RUN'].nil?)

if Options.if_prose_trial_run then
  print %q(\begin{foreignprose}),"\n"
  count_files = 0
  count_paragraphs = 0
  latin.get_contents.each { |file_contents|
    file_contents.split(/(?:\n[ \t]*){2,}/).each { |paragraph|
      print "\n\n%%%%%% paragraph #{count_paragraphs} %%%%%%\n\n"
      print WhereAt.adorn_string_with_commands_to_write_pos_data(paragraph,paragraph_count:count_paragraphs,file_count:count_files),"\n\n"
      count_paragraphs += 1
    }
    count_files += 1
  }
  print %q(\end{foreignprose}),"\n"
else
  raise "now use Epos.interpolate_bitext()" #################### work on this
  current_chapter = -999
  vocab_by_chapter = []
  layouts = []
  0.upto(matches.length-2) { |i|
    a,b = matches[i],matches[i+1]
    latin1,latin2,t1,t2 = a[0],b[0],a[1],b[1]
    starting_ch = nil
    layouts.push([Bilingual.new(latin1,latin2,t1,t2,latin,translation),starting_ch,dry_run])
  }
  0.upto(matches.length-2) { |i|
    bilingual,starting_ch,dry_run = layouts[i]
    if i<matches.length-2 then next_layout=layouts[i+1][0] else next_layout=nil end
    four_page_layout(stuff,latin.genos,db,bilingual,next_layout,vocab_by_chapter,dry_run:dry_run)
  }
  1.upto(vocab_by_chapter.length-1) { |ch|
    filename = sprintf("vocab_ch_%02d.txt",ch)
    File.open(filename,'w') { |f|
      f.print vocab_by_chapter[ch].join("\n")+"\n"
    }
  }
end

%>

%=============================================================================
%    end of file
%=============================================================================

% \end{document} gets generated by eruby
